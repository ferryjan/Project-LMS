@model List<Project_LMS.Models.NaviItem>

@{
    var courseList = Model.Select(i => i.Courses).FirstOrDefault().ToList();
    var historyCourseList = courseList.Where(c => DateTime.Compare(c.EndDate.Date, DateTime.Now.Date) < 0);
    var undergoingAndFutureCourseList = courseList.Where(c => DateTime.Compare(c.EndDate.Date, DateTime.Now.Date) >= 0);
    var moduleList = Model.Select(i => i.Modules).FirstOrDefault().ToList();
    var activityList = Model.Select(i => i.Activities).FirstOrDefault().ToList();
    var documentList = Model.Select(i => i.Documents).FirstOrDefault().ToList();
    var currentController = ViewContext.ParentActionViewContext.RouteData.Values["controller"].ToString();
    var currentAction = ViewContext.ParentActionViewContext.RouteData.Values["action"].ToString();
    string currentCourseId = null;
    string currentDocumentId = null;
    string currentModuleId = null;
    string currentActivityId = null;
    string currentApplicationUserId = null;
    switch (currentController)
    {
        case ("TeacherCourses"):
            currentCourseId = ViewContext.ParentActionViewContext.RouteData.Values["id"]?.ToString();
            break;
        case ("Documents"):
            currentDocumentId = ViewContext.ParentActionViewContext.RouteData.Values["id"]?.ToString();
            break;
        case ("Modules"):
            currentModuleId = ViewContext.ParentActionViewContext.RouteData.Values["id"]?.ToString();
            break;
        case ("ApplicationUser"):
            currentApplicationUserId = ViewContext.ParentActionViewContext.RouteData.Values["id"]?.ToString();
            break;
        case ("Activities"):
            currentActivityId = ViewContext.ParentActionViewContext.RouteData.Values["id"]?.ToString();
            break;
        default:
            break;
    }

    var CurrentSelectedCourseInHistoryCourse = historyCourseList.FirstOrDefault(c => c.CourseId.ToString() == currentCourseId);
}

@if ((currentController == "TeacherCourses" || currentController == "Documents" || currentController == "Modules" || currentController == "Activities" || (currentController == "ApplicationUser" && (currentAction == "CreateStudent" || currentAction == "DeleteStudentFromCourse")))
    && (currentCourseId != null || currentDocumentId != null || currentModuleId != null || currentApplicationUserId != null || currentActivityId != null))
{
    if (currentController == "Documents" && currentAction == "CreateCourseDocument") {currentCourseId = currentDocumentId;}
    else if (currentController == "Documents" && currentAction == "CreateModuleDocument")
    {
        if (currentDocumentId != null) {currentCourseId = moduleList.FirstOrDefault(d => d.ModuleId.ToString() == currentDocumentId).CourseId.ToString();}
    }
    else if (currentController == "Documents" && currentAction == "CreateActivityDocument")
    {
        if (currentDocumentId != null){currentCourseId = activityList.FirstOrDefault(d => d.ActivityId.ToString() == currentDocumentId).Module.CourseId.ToString();}
    }
    else if (currentController == "Documents" && currentAction == "ActivityDocumentDetails")
    {
        if (currentDocumentId != null) {
            var activityID = documentList.FirstOrDefault(d => d.DocumentId.ToString() == currentDocumentId).ActivityId;
            currentCourseId = activityList.FirstOrDefault(d => d.ActivityId == activityID).Module.CourseId.ToString();
        }
    }
    else if (currentController == "Documents" && (currentAction == "ModuleDocumentDetails" || currentAction == "DeleteModuleDocument" || currentAction == "DeleteActivityDocument" || currentAction == "Details" || currentAction == "Delete"))

    {
        if (currentDocumentId != null)
        {
            if (documentList.FirstOrDefault(d => d.DocumentId.ToString() == currentDocumentId).ActivityId != null )
            {
                var activityID = documentList.FirstOrDefault(d => d.DocumentId.ToString() == currentDocumentId).ActivityId;
                currentCourseId = activityList.FirstOrDefault(d => d.ActivityId == activityID).Module.CourseId.ToString();
            }
            else if (documentList.FirstOrDefault(d => d.DocumentId.ToString() == currentDocumentId).ModuleId != null)
            {
                var moduleId = documentList.FirstOrDefault(d => d.DocumentId.ToString() == currentDocumentId).ModuleId;
                currentCourseId = moduleList.FirstOrDefault(d => d.ModuleId == moduleId).CourseId.ToString();
            }
            else
            {
                currentCourseId = documentList.FirstOrDefault(d => d.DocumentId.ToString() == currentDocumentId).CourseId.ToString();
            }
        }
    }
    else if (currentController == "Documents")
    {
        if (currentDocumentId != null) { currentCourseId = documentList.FirstOrDefault(d => d.DocumentId.ToString() == currentDocumentId).Module.CourseId.ToString(); }
    }
    else if (currentController == "ApplicationUser" )
    {
        if (currentApplicationUserId != null) {currentCourseId = currentApplicationUserId;}
    }
    else if (currentController == "Modules" && (currentAction == "Details" || currentAction == "Delete" || currentAction == "Create") )
    {
        if (currentModuleId != null) { currentCourseId = currentModuleId;}
    }
    else if (currentController == "Modules" && currentAction == "Edit")
    {
        if (currentModuleId != null){ currentCourseId = moduleList.FirstOrDefault(d => d.ModuleId.ToString() == currentModuleId).CourseId.ToString();}
    }
    else if (currentController == "Activities" && (currentAction == "Edit" || currentAction == "Details" || currentAction == "Delete"))
    {
        if (currentActivityId != null){currentCourseId = activityList.FirstOrDefault(d => d.ActivityId.ToString() == currentActivityId).Module.CourseId.ToString(); }
    }


    <div id='cssmenu'>
        @if (undergoingAndFutureCourseList.Count() != 0 && CurrentSelectedCourseInHistoryCourse == null)
        {
            <ul>
                <li class='has-sub open'>
                    <a href='#'><span>Courses</span></a>
                    <ul style="display:block">
                        @foreach (var course in undergoingAndFutureCourseList)
                        {
                            if (course.CourseId.ToString() == currentCourseId)
                            {
                                <li class='has-sub open'>
                                    <a href='#'><span>@Html.Raw(course.CourseName)</span></a>
                                    <ul style="display:block">
                                        <li><a href="@Url.Action("Edit", "TeacherCourses", new { id = course.CourseId })"><span><i class="glyphicon glyphicon-edit"></i>@Html.Raw(" Edit Course")</span></a></li>
                                        @foreach (var module in moduleList.Where(m => m.CourseId == course.CourseId))
                                        {
                                            <li><a href="@Url.Action("Edit", "Modules", new { id = module.ModuleId })"><span>@Html.Raw("Module: " + module.Name)</span></a></li>
                                        }
                                    </ul>
                                </li>
                            }
                            else
                            {
                                <li class='has-sub'>
                                    <a href='#'><span>@Html.Raw(course.CourseName)</span></a>
                                    <ul>
                                        <li><a href="@Url.Action("Edit", "TeacherCourses", new { id = course.CourseId })"><span><i class="glyphicon glyphicon-edit"></i>@Html.Raw(" Edit Course")</span></a></li>
                                        @foreach (var module in moduleList.Where(m => m.CourseId == course.CourseId))
                                        {
                                            <li><a href="@Url.Action("Edit", "Modules", new { id = module.ModuleId })"><span>@Html.Raw("Module: " + module.Name)</span></a></li>
                                        }
                                    </ul>
                                </li>
                            }
                        }
                    </ul>
                </li>
            </ul>
            <ul>
                @if (historyCourseList.Count() != 0)
                {
                    <li class='has-sub'>
                        <a href='#'><span>Earlier Courses</span></a>
                        <ul>
                            @foreach (var course in historyCourseList)
                            {
                                <li class='has-sub'>
                                    <a href='#'><span>@Html.Raw(course.CourseName)</span></a>
                                    <ul>
                                        <li><a href="@Url.Action("Edit", "TeacherCourses", new { id = course.CourseId })"><span><i class="glyphicon glyphicon-edit"></i>@Html.Raw(" Edit Course")</span></a></li>
                                        @foreach (var module in moduleList.Where(m => m.CourseId == course.CourseId))
                                        {
                                            <li><a href="@Url.Action("Edit", "Module", new { id = module.ModuleId })"><span>@Html.Raw("Module: " + module.Name)</span></a></li>
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
        }

        @if (historyCourseList.Count() != 0 && CurrentSelectedCourseInHistoryCourse != null)
        {
            <ul>
                @if (undergoingAndFutureCourseList.Count() != 0)
                {
                    <li class='has-sub'>
                        <a href='#'><span>Courses</span></a>
                        <ul>
                            @foreach (var course in undergoingAndFutureCourseList)
                            {
                                <li class='has-sub'>
                                    <a href='#'><span>@Html.Raw(course.CourseName)</span></a>
                                    <ul>
                                        <li><a href="@Url.Action("Edit", "TeacherCourses", new { id = course.CourseId })"><span><i class="glyphicon glyphicon-edit"></i>@Html.Raw(" Edit Course")</span></a></li>
                                        @foreach (var module in moduleList.Where(m => m.CourseId == course.CourseId))
                                        {
                                            <li><a href="@Url.Action("Edit", "Modules", new { id = module.ModuleId })"><span>@Html.Raw("Module: " + module.Name)</span></a></li>
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
            <ul>
                <li class='has-sub open'>
                    <a href='#'><span>Earlier Courses</span></a>
                    <ul style="display:block">
                        @foreach (var course in historyCourseList)
                        {
                            if (course.CourseId.ToString() == currentCourseId)
                            {
                                <li class='has-sub open'>
                                    <a href='#'><span>@Html.Raw(course.CourseName)</span></a>
                                    <ul style="display:block">
                                        <li><a href="@Url.Action("Edit", "TeacherCourses", new { id = course.CourseId })"><span><i class="glyphicon glyphicon-edit"></i>@Html.Raw(" Edit Course")</span></a></li>
                                        @foreach (var module in moduleList.Where(m => m.CourseId == course.CourseId))
                                        {
                                            <li><a href="@Url.Action("Edit", "Modules", new { id = module.ModuleId })"><span>@Html.Raw("Module: " + module.Name)</span></a></li>
                                        }
                                    </ul>
                                </li>
                            }
                            else
                            {
                                <li class='has-sub'>
                                    <a href='#'><span>@Html.Raw(course.CourseName)</span></a>
                                    <ul>
                                        <li><a href="@Url.Action("Edit", "TeacherCourses", new { id = course.CourseId })"><span><i class="glyphicon glyphicon-edit"></i>@Html.Raw(" Edit Course")</span></a></li>
                                        @foreach (var module in moduleList.Where(m => m.CourseId == course.CourseId))
                                        {
                                            <li><a href="@Url.Action("Edit", "Modules", new { id = module.ModuleId })"><span>@Html.Raw("Module: " + module.Name)</span></a></li>
                                        }
                                    </ul>
                                </li>
                            }
                        }
                    </ul>
                </li>
            </ul>
        }

    </div>
}
else
{
    <div id='cssmenu'>
        <ul>
            @if (undergoingAndFutureCourseList.Count() != 0)
            {
                <li class='has-sub'>
                    <a href='#'><span>Courses</span></a>
                    <ul>
                        @foreach (var course in undergoingAndFutureCourseList)
                        {
                            <li class='has-sub'>
                                <a href='#'><span>@Html.Raw(course.CourseName)</span></a>
                                <ul>
                                    <li><a href="@Url.Action("Edit", "TeacherCourses", new { id = course.CourseId })"><span><i class="glyphicon glyphicon-edit"></i>@Html.Raw(" Edit Course")</span></a></li>
                                    @foreach (var module in moduleList.Where(m => m.CourseId == course.CourseId))
                                    {
                                        <li><a href="@Url.Action("Edit", "Modules", new { id = module.ModuleId })"><span>@Html.Raw("Module: " + module.Name)</span></a></li>
                                    }
                                </ul>
                            </li>
                        }
                    </ul>
                </li>
            }
        </ul>
        <ul>
            @if (historyCourseList.Count() != 0)
            {
                <li class='has-sub'>
                    <a href='#'><span>Earlier Courses</span></a>
                    <ul>
                        @foreach (var course in historyCourseList)
                        {
                            <li class='has-sub'>
                                <a href='#'><span>@Html.Raw(course.CourseName)</span></a>
                                <ul>
                                    <li><a href="@Url.Action("Edit", "TeacherCourses", new { id = course.CourseId })"><span><i class="glyphicon glyphicon-edit"></i>@Html.Raw(" Edit Course")</span></a></li>
                                    @foreach (var module in moduleList.Where(m => m.CourseId == course.CourseId))
                                    {
                                        <li><a href="@Url.Action("Edit", "Module", new { id = module.ModuleId })"><span>@Html.Raw("Module: " + module.Name)</span></a></li>
                                    }
                                </ul>
                            </li>
                        }
                    </ul>
                </li>
            }
        </ul>
    </div>
}

