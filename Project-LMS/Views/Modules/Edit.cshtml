@model Project_LMS.Models.Module

@{
    ViewBag.Title = "Edit";
}

<h2>Edit Module</h2>


@using (Html.BeginForm("Edit", "Modules", new { id = Model.CourseId }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4 style="color:red">@Model.Course.CourseName&nbsp;@Model.Course.StartDate.ToString("yyyy-MM-dd")&nbsp;-&nbsp;@Model.Course.EndDate.ToString("yyyy-MM-dd")</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <h4 style="color:indianred"> @ViewBag.DateNotValidMessage </h4>
        @Html.HiddenFor(model => model.ModuleId)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control date-picker", autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control date-picker", autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">

            <div class="col-md-2">
                @Html.ActionLink("Back to Course edit", "Edit", "TeacherCourses", new { id = Model.CourseId }, new { @class = "btn btn-primary btn-large" })
            </div>

            <div class="col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
        <hr />
    </div>
}

<br />
<br />

@Html.Action("ShowActivities", "Activities", new { moduleId = Model.ModuleId })

<br />
<br />

@Html.Action("ModuleFileDetails", "Documents", new { moduleId = Model.ModuleId })

<div>
    @Html.ActionLink("Back to Course edit", "Edit", "TeacherCourses", new { id = Model.CourseId }, new { @class = "btn btn-primary btn-large" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <script src="~/Scripts/jquery-ui-timepicker-addon.min.js"></script>
    <link href="@Url.Content("~/Content/themes/base/jquery-ui.css")" rel="stylesheet" type="text/css" />
    <script type="text/javascript">
        $(document).ready(function () {
            $(function () {
                $(".date-picker").datepicker({
                    changeMonth: true,
                    changeYear: true,
                    yearRange: "-100:+2",
                    dateFormat: 'yy-mm-dd',
                    controlType: 'select'
                });

            });

            jQuery.validator.methods.date = function (value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                if (isChrome) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };

        });

    </script>
}
